@mixin generalColumnDef($gutter) {
    position: relative;
    float: left;
    margin-right: $gutter;
}
@mixin getSingleColumnDef ($w, $gutter) {
    @include generalColumnDef($gutter);
    width: $w;
}

@mixin getWideColumnDef ($w, $gutter, $prevWidthSum) {
    @include generalColumnDef($gutter);
    width: $prevWidthSum + $w;
}

@mixin generalRowDef($gutter) {
    margin-bottom: $gutter;
}
@mixin getSingleRowDef ($h, $gutter) {
    @include generalRowDef($gutter);
    height: $h;
}
@mixin getWideRowDef ($h, $gutter, $prevHeightSum) {
    @include generalRowDef($gutter);
    height: $prevHeightSum + $h;
}

@mixin gridModuleBasicRules($pref) {
    .#{$pref}-x-col-1 {
        left: 0;
    }
    .#{$pref}-y-row-1 {
        top: 0;
    }
}


//GRID MODULE RULES for both columns and rows
@mixin gridModuleRules($i, $type, $pref, $outMeasure, $gutterMeasure, $upToHereSum) {
    $nextId: $i + 1;

    .#{$pref}-#{$type}-#{$i} {
        @if $type == 'col' {
            @include getSingleColumnDef($outMeasure, $gutterMeasure);
        }
        @else {
            @include getSingleRowDef($outMeasure, $gutterMeasure);
        }
    }

    //wide columns (each column has its width as widthsUpToHereSum + colWidth (width gutterWidth as margin))
    .#{$pref}-extended-#{$type}-#{$i} {
        @if $type == 'col' {
            @include getWideColumnDef($outMeasure, $gutterMeasure, $upToHereSum);
        }
        @else {
            @include getWideRowDef($outMeasure, $gutterMeasure, $upToHereSum);
        }
    }

    @if $type == 'col' {
        .#{$pref}-x-col-#{$nextId} {
            left: $upToHereSum + $outMeasure + $gutterMeasure;
        }
        .#{$pref}-x-col-#{$i}-end {
            left: $upToHereSum + $outMeasure;
        }
    }
    @else {
        .#{$pref}-y-row-#{$nextId} {
            top: $upToHereSum + $outMeasure + $gutterMeasure;
        }
        .#{$pref}-y-row-#{$i}-end {
            top: $upToHereSum + $outMeasure;
        }
    }
}

@mixin gridModuleRelationRules($type, $pref, $i, $j, $measure, $measureToPreviousEnd) {
    .#{$pref}-ext-#{$type}-fromto-#{$i}-#{$j} {
        @if $type == 'col' {
            width: $measure;
        }
        @else {
            height: $measure;
        }
    }

    .#{$pref}-ext-#{$type}-fromto-#{$i}-#{$j - 1}-end {
        @if $type == 'col' {
            width: $measureToPreviousEnd;
        }
        @else {
            height: $measureToPreviousEnd;
        }
    }
}


////////////////////////
// CREATE ALL RULES FOR A SINGLE GRID SYSTEM
////////////////////////
@mixin gridSystemRules($config, $refkey) {
    $prefix: "dg";
    @if ($refkey != 'default') {
        $prefix: $prefix + "-" + map-get($config, "prefix");
    }
    $designWidth: map-get($config, "designWidth");
    $designHeight: map-get($config, "designHeight");

    $ncols: map-get($config, "ncols");
    $nrows: map-get($config, "nrows");
    $colsWidths: map-get($config, "colsWidths");
    $rowsHeights: map-get($config, "rowsHeights");
    $colsGutters: map-get($config, "colsGutters");
    $rowsGutters: map-get($config, "rowsGutters");

    // // COLUMNS
    $computedColWidths: ();
    $computedColWidthsNoGutters: ();
    @for $i from 1 through length($colsWidths) {
        $w: nth($colsWidths, $i);
        $widthsUpToHereSum: sumList($computedColWidths);
        $guttersSum: sumListPercentage($colsGutters, $designWidth);
        $colWidth: getPercentageValue($designWidth, $w, 100% - $guttersSum);
        $gutterWidth: getPercentageValue($designWidth, nth($colsGutters, $i));

        @include gridModuleRules($i, 'col', $prefix, $colWidth, $gutterWidth, $widthsUpToHereSum);

        $computedColWidths: append($computedColWidths, $colWidth + $gutterWidth);
        $computedColWidthsNoGutters: append($computedColWidths, $colWidth);
    }

    @include gridModuleBasicRules($prefix);

    // // ROWS
    $computedRowHeights: ();
    $computedRowHeightsNoGutters: ();
    @for $i from 1 through length($rowsHeights) {
        $h: nth($rowsHeights, $i);
        $heightsUpToHereSum: sumList($computedRowHeights);
        $guttersSum: sumListPercentage($rowsGutters, $designHeight);
        $rowHeight: getPercentageValue($designHeight, $h, 100% - $guttersSum);
        $gutterHeight: getPercentageValue($designHeight, nth($rowsGutters, $i));

        @include gridModuleRules($i, 'row', $prefix, $rowHeight, $gutterHeight, $heightsUpToHereSum);

        $computedRowHeights: append($computedRowHeights, $rowHeight + $gutterHeight);
        $computedRowHeightsNoGutters: append($computedRowHeights, $rowHeight);
    }

    // // RELATIONS
    @for $i from 1 through length($computedColWidths) {
        @for $j from 1 through length($computedColWidths) {
            $sumcw: sumList($computedColWidths, $i, $j);
            @include gridModuleRelationRules('col', $prefix, $i, $j+1, $sumcw, $sumcw - getPercentageValue($designWidth, nth($colsGutters, $j)));
        }
    }

    @for $i from 1 through length($computedRowHeights) {
        @for $j from 1 through length($computedRowHeights) {
            $sumrh: sumList($computedRowHeights, $i, $j);
            @include gridModuleRelationRules('row', $prefix, $i, $j+1, $sumrh, $sumrh - getPercentageValue($designHeight, nth($rowsGutters, $j)));
        }
    }
}
